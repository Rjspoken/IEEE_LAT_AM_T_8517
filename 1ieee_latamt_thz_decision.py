# -*- coding: utf-8 -*-
"""IEEE_LATAMT_MAPE_Step12THz_Decision.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZufUjoh6Fg0i8OVzKjUnLYbvNNVCNaZ2

# *Developing a function for the RDecesion Treet Algorithm and applying dataset to this model*

Importing Libraries
"""

import pandas as pd
from sklearn.model_selection import train_test_split
import time

"""Mounting Google Drive to access the dataset"""

from google.colab import drive
drive.mount('/content/drive')

# Reading data from csv file
dataset = pd.read_csv('/content/drive/MyDrive/ML_2023/processed_dataset.csv')

"""Creating a function to buld and train the ML Model"""

x = pd.DataFrame(dataset.iloc[:, 0:4].values)
y = dataset.iloc[:, 4].values

#Generating training and test data sets
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 123)

# Importing Decesion Tree
from sklearn.tree import DecisionTreeRegressor

DTReg = DecisionTreeRegressor()
start_time = time.time()
DTReg.fit(x_train,y_train)
end_time = time.time()
fit_time = end_time - start_time
print("Fit Time:", fit_time, "seconds")

start_time = time.time()
y_pred = DTReg.predict(x_test)
end_time = time.time()
prediction_time = end_time - start_time

# Prediction Metrics

from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error as mse
from sklearn.metrics import max_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_absolute_percentage_error


MSE = mse(y_test, y_pred)
R2 = r2_score(y_test, y_pred)
MAX_ERROR = max_error(y_test, y_pred);
MEAN_ABSOLUTE_ERROR = mean_absolute_error(y_test, y_pred)
MAPE = mean_absolute_percentage_error(y_test, y_pred)

print("Mean Squared Error", MSE)
print("R-Squared: ", R2)
print("Max Error", MAX_ERROR);
print("Mean Absolute Error", MEAN_ABSOLUTE_ERROR);
print("MAPE", MAPE);
print("Prediction Time:", prediction_time, "seconds")

"""Create a function that will plot a graph between the predicted and actual values"""

import matplotlib.pyplot as plt
plt.scatter(x=y_test, y=y_pred, c='crimson', alpha=0.6)
plt.plot(y_pred, y_pred,color='black', linestyle='dashed')
plt.title('Actual vs. Predicted Values of Return Loss (Decesion Tree)')
plt.xlabel('Actual values (dB)')
plt.ylabel('Predicted values (dB)')
plt.show()